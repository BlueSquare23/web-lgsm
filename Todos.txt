## Beta Version 1.8.0 Todos

### v1.8.0 Pt 1.

* Finish building out connector script and integrating changes into the app.
  - Move post install cfg fixes out of shell_exec function / utils.py script
    and into the new ansible connector script.
    - For gs installed as new users, web-lgsm user lacks perms to create new
      cfg files.
  - Also add playbook json cleanup after connector script run.
    - The connector script should delete it's input json after its done doing
      the needful or in the event it fails.
    - The last thing we need is for old delete json vars hanging around when
      someone is trying to add a game server.
  - Validation should be built into this script.
    - Going to have to do a lot of boiling down and pass in only what is
      absolutely necessary.
    - THE MAIN THING TO VALIDATE IS `gs_user`!!!
      - WE CANNOT ALLOW GS_USER TO BE ANYTHING OTHER THAN A GAME SERVER
        USERNAME!!!
      - If someone has shell access and they're able to provide `root` or `ALL`
        as the gs_user var then its all ogre, pwned!
      - So very important to validate that one and make sure the connector
        script is owned by root and not writable by the web-lgsm user. 
    - We should validate as much as we possibly can of course still, but yes
      gs_user in particular.
---

* Lock down other user sudoers rules more.
  - For example here's what I have as the current sudoers rule.
  - `(mcserver) NOPASSWD: /home/mcserver/Minecraft/mcserver, /usr/bin/watch, /usr/bin/tmux, /usr/bin/kill`
  - That's probably too open and could be locked down more.
    - At least the tmux cmd probably could be, will have to think more about
      the others...

* Figure on what's going on where output objects for deleted game servers don't
  get cleaned up correctly.
  - Its happened to me a couple of times now where I've got to delete a server
    then re-install it and the output route in mem is still the old installs
    one so the install doesn't stream out like its supposed to.
  - Minor bug but just something silly is going on.
  - Might be related to leave game server files on delete option...

* Add additional debug mode & verbose level for info printing.
  - In other words if the app is started in --debug mode, enable some
    additional info printing.
  - Also want to add a verbosity selector.
    - This will likely take the form of a main.conf param.
    - Maybe I'll do 1,2,3 or something to print more info at higher levels.

* Fix tests broken by changes to auto-install / default new user install.

* Remove tmux socket file purge option.
  - This was nice and hand for me as a developer while trying to figure out the
    socket file stuff.
  - However, I suspect it was of limited or of no use to most people
    downloading and installing the app.
    - Maybe if their tmux got messed up because of uninstalling / reinstalling
      a bunch before my code had all the bugs worked out, then they probably
      could've used it.
    - But the status indicator and live console logic that is based of finding
      the socket files has been figured out ever since I discovered where the
      base lgsm keeps the id files. 
    - Aka the issue this button was created for as been resolved and its now
      vestigial.

* Add new flag to `web-lgsm.py` to allow external gs_user.
  - This will prompt for a sudo password and the supplied gs_user value will be
    edited into the list of allowed gs_users in the `validate_gs_user.yml`
    playbook.
  - People will only need to run it with this flag when they're trying to add
    an existing game server that was installed as a system user which is
    non-standard.
    - By default the LGSM project themselves recommend users install server as
      new users where the username matches the main gs script. Aka Minecraft
      should be installed as the mcserver user, etc.
    - If someone installed minecraft as username `todd` and the web-lgsm is
      running as username `billybob`, that server can still be added and
      managed by the web interface.
    - Users in that predicament will just have to run the `web-lgsm.py` script
      with the new arg first.

* Write new tests for newly added features:
  - Need new tests for:
    - New settings page options:
      - install_create_new_user
      - passwordles_install
      - Make sure toggle changes config file.
    - Test new full auto install passwordless.
    - Test new full auto install as new user.
      - Rather than run 4 full installs (time consuming, resource intensive)
        I'm just going to run two full installs.
        - The first one will be exactly the same as it is now. Install
          minecraft as the web-lgsm system user.
        - The second one will be install as a new user with passwordless.
        - Aka test old default auto install vs new default auto install.
    - Test new delete for multi user, make sure it cleans up new user.


### v1.8.0 Pt 2.
---

* Add the ability to create multiple web interface users w/ different levels of
  permissions.
  - User requested this: https://github.com/BlueSquare23/web-lgsm/issues/19
  - I've also had it in the back of my mind since I start the project.
  - Fun fact, the sample code example flask app this project's structure is
    taken from is originally a multi user blog so shouldn't be too hard to
    borrow some code from that project and roll it into this.
  - I'm thinking first user that get's setup has admin privileges.
  - Then the admin user can create new users and assign permissions.
  - Additional web interface users can be setup as other admins or as user
    level users.
  - Only Admins can create / delete other users.
  - Non-admin level user permissions should be:
    - Can install new game servers: true/false
    - Can add existing game servers: true/false
    - Can manage game servers: checkbox list
      - Can edit cfgs: true/false
      - Can delete game server: true/false 
      - Controls they're allowed to use: checkbox list
      - All of the above (full control over game server): true/false
  - I kinda like the idea of having the colors in the main.conf. But yeah maybe
    I should just byte the bullet an put those in the db, then each user could
    have their own colors. Don't think that'll be in permissions mk1 though.

* Make config editor work for game servers owned by other system users.
  - Think I'll have to re-write / add-to the write new config data logic.
  - Right now it just writes to disk as the current user.
  - Instead I think I'll have it write to a tempfile with python's `tempfile`
    module, then sudo mv the tempfile into place, and lastly chown it to the
    new user.
  - Will be a little more complicated but shouldn't be too crazy.

* Put more error handling & set default values for main.conf parameters in
  code.
  - The idea here is if some user doesn't have some parameter set in their
    main.conf, or if their main.conf is totally mangled or something, then the
    app shouldn't fail catastrophically, which I think it kinda does rn.

* Make sure `web-lgsm.py --update` can deal with new folders owned as root.
  - Might need to just put a little sudo chown back to the user line for those
    before running git pull or backing up etc.

* Containerize Project!
  - Not entirely sure how to do this yet...
  - One problem I can foresee is not being able to control game servers
    installed outside of the container.
  - Could work for any games installed also in the container but that's rather
    limiting.
  - Also I have to brush up on my docker compose knowledge. 
    - https://www.youtube.com/watch?v=2qKlZQX1Ums

* Add Support for game servers in containers!
  - User requested project support for game servers that are running in
    containers.
  - Issue: https://github.com/BlueSquare23/web-lgsm/issues/16
  - The LGSM themselves provide docker images of game servers.

* Allow multiple auto installs of same game server as new user, just increment
  the name.
  - So first mcserver install would just be mcserver but then a second one the
    user would be mcserver2, mcserver3, etc.

* Make game server name editable.

* Make install_path an optional main.conf parameter.
  - By default I want to set this to just `/home/<user>/<server_name>`.
  - But then allow people to put it where ever for their own purposes.
  - Write tests for this.

* Make install.sh setup npm pkgs at the end.
  - I'm using xterm.js and a plugin for them that can only be installed via
    npm.

* Remove support for python3.8 and add python3.13.
  - Python 3.8 is going eol Oct. 1st 2024.
  - That's also the same day python 3.13 is released.
  - So remove 3.8 from list in `.github/workflows/test.yml` and add 3.13.

* Add support for Ubuntu 24.04.
  - Ubuntu 24.04 is out now too. Can add that to `.github/workflows/test.yml`
    too.

* Identify targets for refactoring.
  - One such thing is all the overhead comments for functions n'@ can be turned
    into under hanging docstring to make the more _pythonic_.
  - If there are some really messy or iffy sections of the code where I hacked
    something together that really needed more thought, now is the time to try
    to identify those things.
  - Not fixing or changing anything just yet. Just want to review what I have
    and where its weak to better get an idea of how to fix it later.

## Backlog

* Possible rework things so that game server name in database is not unique,
  aka users can have more than one game server with the same name.
  - This DB Model line set's install name to be unique:
    `install_name = db.Column(db.String(150), unique=True)`
  - I'm thinking of allowing this possibly under the case where they're
    installed as different users.

* Add Python Selenium end-to-end tests to actually login and do a bunch of
  stuff in the web interface.
  - Try to thoroughly test site functionality, basically redo all of the same
    things the functional tests do through raw GET/POST requests, but instead
    through the selenium browser.

* Think of way to do watch thread timeout. Not terribly important
  - kill_watchers gets the job done alright for rn.
  - But this whole system is probably one of those targets for refactoring &
    rethinking.

* Add Restart/backup Scheduler.
  - User suggested this feature and I think its a good one.
    - https://github.com/BlueSquare23/web-lgsm/issues/20
  - The idea here would be to create a simple web interface to wrap up adding
    crontab entries. Then the actual restarts or backups will just be handled
    by the lgsm game server cli script itself.
  - I've got all of the above to work through first but I do like this idea and
    want to add it in.
  - Just a matter of time until I can get to it.


## Pie in the Sky

Maybe I'll do these things but really they're all just kinda dreams for now.

* Perhaps json for auto install run of the ansible connector script could be
  passed via an api route.
  - That is switch the connector script to pull json for runs from an
    authenticated api route.
  - The auth for this route is something I don't want to figure out right now.

## Disclaimer

This document is basically just a rubber ducky for me while I change things.
Its just a scratch pad to jot things down on and throw ideas in when I maybe
don't have time to work on them right then.

It is the main way I keep track of what needs done for the project so it is a
highly in flux document on the dev branch. Not all of these ideas make sense or
are going to work or make it into the final release.

```
      ,~~.
 ,   (  - )>
 )`~~'   (
(  .__)   )
 `-.____,' 
```

[Art by Hayley Jane Wakenshaw](https://www.asciiart.eu/animals/birds-water)
