## Beta Version 1.8.0 Todos

### v1.8.0 Pt 2. Add Multi Web Interface Users
---

* Add the ability to create multiple web interface users w/ different levels of
  permissions.
  - User requested this: https://github.com/BlueSquare23/web-lgsm/issues/19
  - I've also had it in the back of my mind since I start the project.
  - Fun fact, the sample code example flask app this project's structure is
    taken from is originally a multi user blog so shouldn't be too hard to
    borrow some code from that project and roll it into this.
  - I'm thinking first user that get's setup has admin privileges.
  - Then the admin user can create new users and assign permissions.
  - Additional web interface users can be setup as other admins or as user
    level users.
  - Only Admins can create / delete other users.
  - Non-admin level user permissions should be:
    - Can install new game servers: true/false
    - Can add existing game servers: true/false
    - Can manage game servers: checkbox list
      - Can edit cfgs: true/false
      - Can delete game server: true/false 
      - Controls they're allowed to use: checkbox list
      - All of the above (full control over game server): true/false
  - I kinda like the idea of having the colors in the main.conf. But yeah maybe
    I should just byte the bullet an put those in the db, then each user could
    have their own colors. Don't think that'll be in permissions mk1 though.


### v1.8.0 Pt 3. Dockerize and Shine
---

* Containerize Project!
  - Not entirely sure how to do this yet...
  - One problem I can foresee is not being able to control game servers
    installed outside of the container.
  - Could work for any games installed also in the container but that's rather
    limiting.
  - Also I have to brush up on my docker compose knowledge. 
    - https://www.youtube.com/watch?v=2qKlZQX1Ums

* Add Support for game servers in containers!
  - User requested project support for game servers that are running in
    containers.
  - Issue: https://github.com/BlueSquare23/web-lgsm/issues/16
  - The LGSM themselves provide docker images of game servers.

### v1.8.0 Pt 4. The Rest...
---

* Make config editor work for game servers owned by other system users.
  - Think I'll have to re-write / add-to the write new config data logic.
  - Right now it just writes to disk as the current user.
  - Instead I think I'll have it write to a tempfile with python's `tempfile`
    module, then sudo mv the tempfile into place, and lastly chown it to the
    new user.
  - Will be a little more complicated but shouldn't be too crazy.

* Put more error handling & set default values for main.conf parameters in
  code.
  - The idea here is if some user doesn't have some parameter set in their
    main.conf, or if their main.conf is totally mangled or something, then the
    app shouldn't fail catastrophically, which I think it kinda does rn.

* Make sure `web-lgsm.py --update` can deal with new folders owned as root.
  - Might need to just put a little sudo chown back to the user line for those
    before running git pull or backing up etc.

* Allow multiple auto installs of same game server as new user, just increment
  the name.
  - So first mcserver install would just be mcserver but then a second one the
    user would be mcserver2, mcserver3, etc.

* Make game server name editable.
  - This DB Model line set's install name to be unique:
    `install_name = db.Column(db.String(150), unique=True)`

* Make install_path an optional main.conf parameter.
  - By default I want to set this to just `/home/<user>/<server_name>`.
  - But then allow people to put it where ever for their own purposes.
  - Write tests for this.

* Make install.sh setup npm pkgs at the end.
  - I'm using xterm.js and a plugin for them that can only be installed via
    npm.

* Add support for Ubuntu 24.04.
  - Ubuntu 24.04 is out now too. Can add that to `.github/workflows/test.yml`
    too.

* Identify targets for refactoring.
  - One such thing is all the overhead comments for functions n'@ can be turned
    into under hanging docstring to make the more _pythonic_.
  - If there are some really messy or iffy sections of the code where I hacked
    something together that really needed more thought, now is the time to try
    to identify those things.
  - Not fixing or changing anything just yet. Just want to review what I have
    and where its weak to better get an idea of how to fix it later.

* Fix up Readme.
  - Update Readme gifs with newest look of interface.
  - Add contribute section pointing users to submitting an issue or submitting a
    pull request.
    - I have the community docs for this now.

## Backlog

* Add Python Selenium end-to-end tests to actually login and do a bunch of
  stuff in the web interface.
  - Try to thoroughly test site functionality, basically redo all of the same
    things the functional tests do through raw GET/POST requests, but instead
    through the selenium browser.

* Think of way to do watch thread timeout. Not terribly important
  - kill_watchers gets the job done alright for rn.
  - But this whole system is probably one of those targets for refactoring &
    rethinking.

* Add Restart/backup Scheduler.
  - User suggested this feature and I think its a good one.
    - https://github.com/BlueSquare23/web-lgsm/issues/20
  - The idea here would be to create a simple web interface to wrap up adding
    crontab entries. Then the actual restarts or backups will just be handled
    by the lgsm game server cli script itself.
  - I've got all of the above to work through first but I do like this idea and
    want to add it in.
  - Just a matter of time until I can get to it.


## Pie in the Sky

Maybe I'll do these things but really they're all just kinda dreams for now.

* Perhaps json for auto install run of the ansible connector script could be
  passed via an api route.
  - That is switch the connector script to pull json for runs from an
    authenticated api route.
  - The auth for this route is something I don't want to figure out right now.

## Disclaimer

This document is basically just a rubber ducky for me while I change things.
Its just a scratch pad to jot things down on and throw ideas in when I maybe
don't have time to work on them right then.

It is the main way I keep track of what needs done for the project so it is a
highly in flux document on the dev branch. Not all of these ideas make sense or
are going to work or make it into the final release.

```
      ,~~.
 ,   (  - )>
 )`~~'   (
(  .__)   )
 `-.____,' 
```

[Art by Hayley Jane Wakenshaw](https://www.asciiart.eu/animals/birds-water)
